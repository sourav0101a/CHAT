trigger SupplierContractValidation on Supplier_Contract__c (before insert, before update) {
    Map<String, String> fieldApiLabelMap = new Map<String, String>();
    String objectApiName = 'Supplier_Contract__c';
    Map<String, Schema.SObjectField> objectSchemaFields = Schema.getGlobalDescribe().get(objectApiName).getDescribe().fields.getMap();
    
    // Get field labels for error messages
    for (Schema.SObjectField field : objectSchemaFields.values()) {  
        Schema.DescribeFieldResult fieldDesc = field.getDescribe();  
        fieldApiLabelMap.put(fieldDesc.getName(), fieldDesc.getLabel()); 
    }

    for (Supplier_Contract__c sc : Trigger.new) {
        List<String> missingFields = new List<String>();

        Map<String, Object> requiredFields = new Map<String, Object>{
            'Contracting_Entity__c' => sc.Contracting_Entity__c,
            'Effective_Date__c' => sc.Effective_Date__c,
            'Form_of_Agreement__c' => sc.Form_of_Agreement__c,
            'Is_Handover__c' => sc.Is_Handover__c,
            'Contract_Description__c' => sc.Contract_Description__c,
            'Contract_Type__c' => sc.Contract_Type__c,
            'Used_Agreement_Template__c' => sc.Used_Agreement_Template__c,
            'Law_of_Agreement_Country__c' => sc.Law_of_Agreement_Country__c
        };

        // Check for missing values
        for (String field : requiredFields.keySet()) {
            if (requiredFields.get(field) == null || String.isBlank(String.valueOf(requiredFields.get(field)))) {
                missingFields.add(fieldApiLabelMap.get(field));
            }
        }

        // Prevent save if any required field is missing
        if (!missingFields.isEmpty()) {
            sc.addError('Missing Required Fields: ' + String.join(missingFields, ', '));
        }
    }
}

@isTest
public class SupplierContractValidationTest {
    
    @testSetup
    static void setupTestData() {
        // Create a valid Supplier Contract record
        Supplier_Contract__c validContract = new Supplier_Contract__c(
            Contracting_Entity__c = 'Valid Entity',
            Effective_Date__c = Date.today(),
            Form_of_Agreement__c = 'Contract',
            Is_Handover__c = 'No',
            Contract_Description__c = 'Test Description',
            Contract_Type__c = 'Data License',
            Used_Agreement_Template__c = 'Standard',
            Law_of_Agreement_Country__c = 'USA'
        );
        insert validContract;
    }
    
    @isTest
    static void testValidSupplierContract() {
        Test.startTest();
        Supplier_Contract__c contract = new Supplier_Contract__c(
            Contracting_Entity__c = 'Valid Entity',
            Effective_Date__c = Date.today(),
            Form_of_Agreement__c = 'Contract',
            Is_Handover__c = 'No',
            Contract_Description__c = 'Test Description',
            Contract_Type__c = 'Data License',
            Used_Agreement_Template__c = 'Standard',
            Law_of_Agreement_Country__c = 'USA'
        );

        // Should insert successfully
        insert contract;
        Test.stopTest();
    }

    @isTest
    static void testInvalidSupplierContract() {
        Test.startTest();
        Supplier_Contract__c contract = new Supplier_Contract__c(
            // Missing required fields
            Effective_Date__c = null,
            Form_of_Agreement__c = '',
            Contract_Type__c = ''
        );

        // Expect a DMLException due to missing fields
        try {
            insert contract;
            System.assert(false, 'Expected an exception, but none was thrown');
        } catch (DmlException e) {
            System.debug('Expected Error: ' + e.getMessage());
            System.assert(e.getMessage().contains('Missing Required Fields'), 'Error message does not contain expected text.');
        }
        Test.stopTest();
    }
    
    @isTest
    static void testBulkInsert() {
        Test.startTest();
        List<Supplier_Contract__c> contracts = new List<Supplier_Contract__c>();
        
        for (Integer i = 0; i < 5; i++) {
            contracts.add(new Supplier_Contract__c(
                Contracting_Entity__c = 'Valid Entity ' + i,
                Effective_Date__c = Date.today(),
                Form_of_Agreement__c = 'Contract',
                Is_Handover__c = 'No',
                Contract_Description__c = 'Test Description ' + i,
                Contract_Type__c = 'Data License',
                Used_Agreement_Template__c = 'Standard',
                Law_of_Agreement_Country__c = 'USA'
            ));
        }

        // Bulk insert should work fine
        insert contracts;
        Test.stopTest();
    }
}
